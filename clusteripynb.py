# -*- coding: utf-8 -*-
"""Clusteripynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ys9U6ejMwzDmnrl8fmHnP0bkqIgoIxFm
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
from numpy import genfromtxt
import matplotlib.pyplot as plt
from math import sqrt
import time

# function for Loading data.
def load_data():
   data_path= '/content/drive/MyDrive/Colab Notebooks/jain_feats.txt'
   X = np.genfromtxt(data_path, delimiter=' ')
   data_path = '/content/drive/MyDrive/Colab Notebooks/jain_centers.txt'
   centers = np.genfromtxt(data_path, delimiter=' ')
   return X, centers


# function for getting eucledian distence
def  findeuclediandist(x , y):
   distance = 0.0
   for i in range(len(x)):
        distance += (x[i] - y[i]) ** 2
   return sqrt(distance)

# function for ploting clusters
def  ploting():
   # the Clustring points.
     c_index = 0
     while True:
        if c_index == len(clusters):
             break
        colors = [ "skyblue","blue", "blue",
                   "blue",  "blue","skyblue"
              ]

        for i in clusters:
          temp_x = []
          temp_y = []
          for j in i:
            temp_x.append(data[j][0])
            temp_y.append(data[j][1])
          plt.scatter(temp_x, temp_y, color=colors[c_index])
           # plt.scatter(data[i][0], data[i][1], color=color[c_index])

          c_index += 1

       #The Center points.
        temp_x = []
        temp_y = []
        for i in centers:
           temp_x.append(i[0])
           temp_y.append(i[1])
        plt.scatter(temp_x, temp_y, marker='*', s=500, color='yellow')
        plt.show()


#data loading
data, centers = load_data()

# Initialization
clusters = [ [], [] ]
#algorithm
eldist = 0
iteration = 0
while True:
    temp_clusters = [ [] , [] ]

    #cluster finding
    for s in range(len(data)):
        min_index = 0
        dist = []
        for c in range(len(centers)):
            eldist = findeuclediandist(data[s],centers[c])  #eucledian distance
            dist.append(eldist)
            min_index=dist.index(min(dist))
     # print(min_index)
        temp_clusters[min_index].append(s)

    #geting centers
    new_centers = []
    for L in temp_clusters:
    #determining average
        avg=0

        for i in L:
            avg = avg + data[i]

        avg= avg / len(L)
        new_centers.append(avg)
    centers = new_centers
    iteration +=1
    if iteration > 1:
        shift = 0
        for i in range(len(data)):

            for j in range(len(centers)):
                if i in clusters[j]:
                    prev_cluster = j
            for j in range(len(temp_clusters)):
                if i in temp_clusters[j]:
                    cur_cluster = j

            if prev_cluster != cur_cluster:
                shift += 1
        if shift < 10:
            clusters = temp_clusters.copy()   #assigning temp_cluster to cluster
            break
    clusters = temp_clusters.copy()         #assigning temp_cluster to clusters
ploting()