# -*- coding: utf-8 -*-
"""Astar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1grVHpWwfn87ZL4HW80_38N9Z1j-hirBY
"""

import heapq
adj_list = {

    'S': [['A', 3], ['B', 4]],
    'A': [['B', 2], ['C', 5], ['D', 12] ],
    'B': [['C', 2]],
    'C': [['D', 3]],
    'D': [['C', 4]],

}

h = {

    'S': 7,
    'A': 6,
    'B': 2,
    'C': 1,
    'D': 0,

}
print("Enter the source and the  destination:")
source, destination = input().split()

parent = {
    'S': '',
    'A': '',
    'B': '',
    'C': '',
    'D': '',

}
as_cost = {
    'S':  -1,
    'A':  -1,
    'B':  -1,
    'C':  -1,
    'D':  -1,


}

pq = []   #Priority Queue

heapq.heappush(pq, [h[source], source])

path = []
while True:

    top = heapq.heappop(pq)

    #print(f"top: [{top[0]}, '{top[1]}']")

    if top[1] == destination:
       # print("Terminated")

        node = destination

        while node != '':
           # print(f"Node is: {node}")
            path.append(node)
            node = parent[node]
            # print(node)
        break


    as_cost[top[1]] = top[0]


    for adj_node in adj_list[top[1]]:
      if as_cost[adj_node[0]] == -1 or as_cost[adj_node[0]] > (top[0] - h[top[1]]) + adj_node[1] + h[adj_node[0]]:
            as_cost[adj_node[0]] = (top[0] - h[top[1]]) + adj_node[1] + h[adj_node[0]]     #  Previous path valu - pernet h valu + Path-Cost + heuristic

            #print(top[0],h[top[1]] )
            #print(f"Adjacent_Cost:  {adj_node[0], as_cost[adj_node[0]]}")

            heapq.heappush(pq, [as_cost[adj_node[0]], adj_node[0]])
            parent[adj_node[0]] = top[1] #parent clearance
           # print(f"For TOp: {top[1]}")


# for i in parent:
#  print(f"[{i}-->{parent[i]}]")


#print(path)
path.reverse()
#print("Path: ", end='')
print("Optimal solution path:")
for i in range(len(path)):

    print(path[i],end='')
    if path[i]!=destination:
        print("-->",end='')

print(f"\nOptimal Cost of the path: {as_cost[destination]}")