# -*- coding: utf-8 -*-
"""Hill_Climbing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XNhEwiNomdEeN4rGk6NqhFbuUl_b9Ehk
"""

import copy

SIZE = 3


def calculateHeuristic(state, goal):
    count = 0
    for i in range(SIZE):
        for j in range(SIZE):
            if state[i][j] != goal[i][j]:
                count += 1
    return count

def isGoalState(state, goal):
    return state == goal

def hillClimbingSearch(initialState, goal):
    currentState = copy.deepcopy(initialState)
    currentHeuristic = calculateHeuristic(currentState, goal)

    while not isGoalState(currentState, goal):
        minHeuristic = currentHeuristic
        nextState = None

        for i in range(SIZE):
            for j in range(SIZE):
                if currentState[i][j] == 0:

                    if i > 0:
                        newState = copy.deepcopy(currentState)
                        newState[i][j], newState[i - 1][j] = newState[i - 1][j], newState[i][j]
                        newHeuristic = calculateHeuristic(newState, goal)
                        if newHeuristic < minHeuristic:
                            minHeuristic = newHeuristic
                            nextState = newState




        if nextState is not None:
            currentState = nextState
            currentHeuristic = minHeuristic
        else:
           break


    print("Final State:")
    for row in currentState:
        print(row)


initialState = [
    [3, 2, 4],
    [8, 1, 5],
    [0, 6, 7]
]
goalState = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

hillClimbingSearch(initialState, goalState)