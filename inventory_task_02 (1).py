# -*- coding: utf-8 -*-
"""inventory_task_02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZpyA953XjCTSZIo7ASnJFqxZYkJC87Nf
"""

# -*- coding: utf-8 -*-
"""Inventory_Task_02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZbJ0-w6kyYcojp2cJrXgmJ6GTLMhebiN
"""

import numpy as np
import matplotlib.pyplot as plt

#m = 11 # maximum capacity
#n = 5 # review period
print("Enter the max capacity(m) and review period(n):")
m, n = input().split()
m=int(m)
n=int(n)

beginning_inventory = 3
daily_demand = 0
ending_inventory = 0
shortage_quantity = 0
order_quantity = 8
days_until_arrival = 2

#Initialize ALL
total_supplied = beginning_inventory;
spoilt_inventory = 0;
shortage_days = 0;
each_product_life = [];
total_ending_inventory = 0;

# products self life discover and add them into inventory
for i in range(beginning_inventory):
  in_product = np.random.randint(15,30);
  each_product_life.append(in_product);

print("Starting inventory: ", each_product_life);

y = []

for cycle in range(1,11):

    print("Cycle No: ", cycle)

    for day in range(1,n+1):

        print("Day No: ", day)
        days_until_arrival -= 1

        # Check if order arrives
        if days_until_arrival == -1:
          beginning_inventory += order_quantity


            #When new inventory is being added , assign a deadline for each.

         # total_supplied += order_quantity;  #adding data for newly arrived inventory


          for i in range(order_quantity):
                product = np.random.randint(15,30);
                each_product_life.append(product);


          order_quantity = 0
        print("Beginning Inventory : ", beginning_inventory)
        # Daily Random demand collection and add them with previous shortage
        daily_demand = np.random.choice(a=[0,1,2,3,4], p=[0.10, 0.25, 0.35, 0.21, 0.09])
        total_demand = daily_demand + shortage_quantity


        # Daily dicard inventory according to demond
        while(total_demand !=0):
              shortage_quantity = 0

              #for Selling product with check self life
              if ((beginning_inventory!=0) and (each_product_life[0] != 0)):
                each_product_life.pop(0);
                total_demand -=1
                beginning_inventory -= 1
              #if product have no self life   then discard product
              elif (beginning_inventory!=0) and (each_product_life[0] == 0):
                each_product_life.pop(0);
                spoilt_inventory += 1;
                beginning_inventory -= 1

              # when inventory is empty than calulate shortage and how many day it became sortage
              elif beginning_inventory == 0:
                ending_inventory = 0
                shortage_quantity = total_demand
                shortage_days += 1;
                break





        ending_inventory=beginning_inventory

        if ending_inventory > m:
            ending_inventory = m


        #After day Ending total products and calculate total how many product get from enidng day
        daily_ending_inventory = len(each_product_life);
        total_ending_inventory += daily_ending_inventory;


        #Product Life decrement per day
        j = 0;
        for i in range( daily_ending_inventory):
          if each_product_life[j] > 0:
            each_product_life[j] = each_product_life[j] - 1;
          j+=1;

        # Review day
        if day==n:
            order_quantity = m - ending_inventory + shortage_quantity
            days_until_arrival = np.random.choice(a=[1,2,3], p=[0.6,0.3,0.1]) # lead time

        #For Graph
        y.append(ending_inventory)
       # print("Beginning Inventory : ", beginning_inventory)
        print("Daily Demand : ", daily_demand)
        print("Ending Inventory : ", ending_inventory)
        print("Shortage Quantity : ", shortage_quantity)
        print("Order Quantity : ", order_quantity)
        print("Days until arrival : ", days_until_arrival)
        print("Current Inventory: ", each_product_life);
        print("---------------------------")

        beginning_inventory = ending_inventory


    print("--------END CYCLE-----------")
    print("---------------------------")


average_ending_inventory = total_ending_inventory/(n*cycle)
print("Average Ending Inventory: ", average_ending_inventory);
print("No. of days of shortage:", shortage_days);
proportion_of_spoilt = spoilt_inventory/total_supplied;
print("spoilt inventory Ratio in %: ", proportion_of_spoilt*100, "%")

plt.plot(y)